"use client"

import { useState, useMemo, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import {
  ArrowLeft,
  Search,
  Filter,
  Plus,
  Users,
  Clock,
  AlertTriangle,
  CheckCircle,
  Calendar,
  Download,
  RefreshCw,
  Eye,
  Edit,
  Building2,
  Building,
  Stethoscope,
  DollarSign,
  AlertCircle,
  Timer,
  BarChart3,
  Zap,
  Inbox,
  Package,
  Truck,
  ShoppingCart,
} from "lucide-react"
import Link from "next/link"

interface VisitFrequency {
  discipline: "RN" | "PT" | "OT" | "MSW" | "HHA"
  authorized: number
  used: number
  remaining: number
  weeklyFrequency: string
  lastVisit: string
  nextScheduled: string
  lupaThreshold: number
  isOverThreshold: boolean
  costPerVisit: number
  totalCost: number
}

interface PatientGoal {
  id: string
  discipline: string
  goal: string
  targetDate: string
  status: "Not Started" | "In Progress" | "Achieved" | "Modified" | "Discontinued"
  progress: number
  notes: string
}

interface DMEOrder {
  id: string
  supplier: "Parachute Health" | "Verse Medical"
  status: "pending" | "approved" | "shipped" | "delivered" | "cancelled"
  orderDate: string
  estimatedDelivery?: string
  trackingNumber?: string
  items: Array<{
    name: string
    quantity: number
    category: string
    cost: number
  }>
  totalCost: number
  insuranceCoverage: string
  autoGenerated: boolean
  notes?: string
}

interface Patient {
  id: string
  name: string
  axxessId: string
  referralDate: string
  currentStatus: "Active" | "Pending" | "Discharged" | "On Hold"
  dischargeStatus: "N/A" | "Completed" | "Transferred" | "Deceased" | "Against Medical Advice"
  referralAccepted: boolean
  assignedStaff: string
  socDueDate: string
  socWindowStatus: "On Track" | "Due Soon" | "Overdue"
  location: string
  referralType: "Hospital" | "Facility" | "Clinic"
  priority: "High" | "Medium" | "Low"
  diagnosis: string
  age: number
  insurance: string
  phoneNumber: string
  address: string
  emergencyContact: string
  episodeStartDate: string
  episodeEndDate: string
  nextReEvalDate: string
  lupaStatus: "Safe" | "At Risk" | "Over Threshold"
  totalEpisodeCost: number
  projectedCost: number
  visitFrequencies: VisitFrequency[]
  patientGoals: PatientGoal[]
  dmeOrders: DMEOrder[]
  woundCare?: {
    hasWounds: boolean
    woundCount: number
    woundTypes: string[]
    lastAssessment: string
    healingProgress: "Improving" | "Stable" | "Declining"
    nextDressing: string
    supplies: string[]
  }
}

export default function PatientTrackingDashboard() {
  const [searchTerm, setSearchTerm] = useState("")
  const [staffFilter, setStaffFilter] = useState("All")
  const [locationFilter, setLocationFilter] = useState("All")
  const [statusFilter, setStatusFilter] = useState("All")
  const [referralTypeFilter, setReferralTypeFilter] = useState("All")
  const [lupaFilter, setLupaFilter] = useState("All")
  const [showAddPatient, setShowAddPatient] = useState(false)
  const [selectedPatient, setSelectedPatient] = useState<Patient | null>(null)
  const [showPatientDetails, setShowPatientDetails] = useState(false)
  const [activeTab, setActiveTab] = useState("overview")
  const [isLoading, setIsLoading] = useState(false)
  const [lastSync, setLastSync] = useState<string | null>(null)
  const [selectedStaffMember, setSelectedStaffMember] = useState<string>("")
  const [isRecordingSupervision, setIsRecordingSupervision] = useState(false)
  const [supervisionTime, setSupervisionTime] = useState(0)
  const [aiInsights, setAiInsights] = useState<any[]>([])
  const [supervisionNotes, setSupervisionNotes] = useState("")
  const [showSupervisionModal, setShowSupervisionModal] = useState(false)
  const [showCompetencyModal, setShowCompetencyModal] = useState(false)
  const [selectedStaffForEvaluation, setSelectedStaffForEvaluation] = useState<any>(null)
  const [evaluationInProgress, setEvaluationInProgress] = useState(false)
  const [aiAnalysisResults, setAiAnalysisResults] = useState<any[]>([])
  const [competencyScores, setCompetencyScores] = useState<any>({})

  // Auto-generate DME orders based on diagnosis and wound care needs
  const generateAutomaticDMEOrder = async (patient: Patient): Promise<DMEOrder[]> => {
    const orders: DMEOrder[] = []

    // Determine supplier based on patient location and insurance
    const supplier = patient.insurance.toLowerCase().includes("medicare") ? "Parachute Health" : "Verse Medical"

    // Generate wound care supplies if patient has wounds
    if (patient.woundCare?.hasWounds) {
      const woundCareItems = [
        { name: "Hydrocolloid Dressings", quantity: 30, category: "wound_care", cost: 45.0 },
        { name: "Silver Foam Dressings", quantity: 20, category: "wound_care", cost: 60.0 },
        { name: "Gauze Pads (4x4)", quantity: 50, category: "wound_care", cost: 25.0 },
        { name: "Medical Tape", quantity: 5, category: "wound_care", cost: 15.0 },
      ]

      orders.push({
        id: `DME-${supplier.replace(" ", "").toUpperCase()}-${Date.now()}`,
        supplier: supplier as "Parachute Health" | "Verse Medical",
        status: "pending",
        orderDate: new Date().toISOString().split("T")[0],
        items: woundCareItems,
        totalCost: woundCareItems.reduce((sum, item) => sum + item.quantity * item.cost, 0),
        insuranceCoverage: patient.insurance.toLowerCase().includes("medicare") ? "80%" : "90%",
        autoGenerated: true,
        notes: `Auto-generated based on wound care needs: ${patient.woundCare.woundTypes.join(", ")}`,
      })
    }

    // Generate diabetic supplies if diagnosis includes diabetes
    if (patient.diagnosis.toLowerCase().includes("diabet")) {
      const diabeticItems = [
        { name: "Blood Glucose Monitor", quantity: 1, category: "diabetic", cost: 75.0 },
        { name: "Test Strips (100ct)", quantity: 2, category: "diabetic", cost: 80.0 },
        { name: "Lancets (100ct)", quantity: 2, category: "diabetic", cost: 20.0 },
        { name: "Alcohol Swabs", quantity: 5, category: "diabetic", cost: 15.0 },
      ]

      orders.push({
        id: `DME-${supplier.replace(" ", "").toUpperCase()}-${Date.now() + 1}`,
        supplier: supplier as "Parachute Health" | "Verse Medical",
        status: "pending",
        orderDate: new Date().toISOString().split("T")[0],
        items: diabeticItems,
        totalCost: diabeticItems.reduce((sum, item) => sum + item.quantity * item.cost, 0),
        insuranceCoverage: patient.insurance.toLowerCase().includes("medicare") ? "80%" : "90%",
        autoGenerated: true,
        notes: "Auto-generated based on diabetic diagnosis",
      })
    }

    // Generate mobility equipment for post-surgical or PT patients
    if (
      patient.diagnosis.toLowerCase().includes("post-op") ||
      patient.diagnosis.toLowerCase().includes("hip") ||
      patient.visitFrequencies.some((v) => v.discipline === "PT")
    ) {
      const mobilityItems = [
        { name: "Walker with Wheels", quantity: 1, category: "mobility", cost: 120.0 },
        { name: "Toilet Safety Rails", quantity: 1, category: "mobility", cost: 85.0 },
        { name: "Shower Chair", quantity: 1, category: "mobility", cost: 95.0 },
      ]

      orders.push({
        id: `DME-${supplier.replace(" ", "").toUpperCase()}-${Date.now() + 2}`,
        supplier: supplier as "Parachute Health" | "Verse Medical",
        status: "pending",
        orderDate: new Date().toISOString().split("T")[0],
        items: mobilityItems,
        totalCost: mobilityItems.reduce((sum, item) => sum + item.quantity * item.cost, 0),
        insuranceCoverage: patient.insurance.toLowerCase().includes("medicare") ? "80%" : "90%",
        autoGenerated: true,
        notes: "Auto-generated based on mobility/PT needs",
      })
    }

    return orders
  }

  // Submit DME orders to suppliers
  const submitDMEOrder = async (order: DMEOrder, patientId: string) => {
    try {
      const response = await fetch("/api/dme/submit-order", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          order,
          patientId,
          supplier: order.supplier,
        }),
      })

      if (response.ok) {
        const result = await response.json()
        return {
          ...order,
          status: "approved" as const,
          trackingNumber: result.trackingNumber,
          estimatedDelivery: result.estimatedDelivery,
        }
      }
    } catch (error) {
      console.error("Failed to submit DME order:", error)
      return { ...order, status: "cancelled" as const }
    }

    return order
  }

  // Mock patient data with DME orders - Initialize with default empty array
  const [patients, setPatients] = useState<Patient[]>([
    {
      id: "PT-2024-001",
      name: "Margaret Anderson",
      axxessId: "AX-12345",
      referralDate: "2024-01-15",
      currentStatus: "Active",
      dischargeStatus: "N/A",
      referralAccepted: true,
      assignedStaff: "Sarah Johnson, RN",
      socDueDate: "2024-01-22",
      socWindowStatus: "Overdue",
      location: "Downtown Clinic",
      referralType: "Hospital",
      priority: "High",
      diagnosis: "Diabetic foot ulcer, CHF",
      age: 78,
      insurance: "Medicare",
      phoneNumber: "(555) 123-4567",
      address: "123 Main St, City, ST 12345",
      emergencyContact: "John Anderson (Son) - (555) 987-6543",
      episodeStartDate: "2024-01-15",
      episodeEndDate: "2024-03-15",
      nextReEvalDate: "2024-02-14",
      lupaStatus: "At Risk",
      totalEpisodeCost: 2850.0,
      projectedCost: 3200.0,
      visitFrequencies: [
        {
          discipline: "RN",
          authorized: 14,
          used: 8,
          remaining: 6,
          weeklyFrequency: "2x/week",
          lastVisit: "2024-01-20",
          nextScheduled: "2024-01-22",
          lupaThreshold: 10,
          isOverThreshold: false,
          costPerVisit: 125.0,
          totalCost: 1000.0,
        },
        {
          discipline: "PT",
          authorized: 12,
          used: 7,
          remaining: 5,
          weeklyFrequency: "2x/week",
          lastVisit: "2024-01-19",
          nextScheduled: "2024-01-21",
          lupaThreshold: 10,
          isOverThreshold: false,
          costPerVisit: 150.0,
          totalCost: 1050.0,
        },
        {
          discipline: "HHA",
          authorized: 20,
          used: 12,
          remaining: 8,
          weeklyFrequency: "3x/week",
          lastVisit: "2024-01-20",
          nextScheduled: "2024-01-22",
          lupaThreshold: 15,
          isOverThreshold: false,
          costPerVisit: 65.0,
          totalCost: 780.0,
        },
      ],
      patientGoals: [
        {
          id: "G001",
          discipline: "PT",
          goal: "Patient will ambulate 50 feet with walker independently",
          targetDate: "2024-02-15",
          status: "In Progress",
          progress: 65,
          notes: "Good progress, patient can now walk 35 feet",
        },
        {
          id: "G002",
          discipline: "RN",
          goal: "Wound healing with 50% reduction in size",
          targetDate: "2024-02-20",
          status: "In Progress",
          progress: 40,
          notes: "Wound showing signs of improvement",
        },
      ],
      dmeOrders: [
        {
          id: "DME-PARACHUTE-001",
          supplier: "Parachute Health",
          status: "shipped",
          orderDate: "2024-01-16",
          estimatedDelivery: "2024-01-24",
          trackingNumber: "PH123456789",
          items: [
            { name: "Blood Glucose Monitor", quantity: 1, category: "diabetic", cost: 75.0 },
            { name: "Test Strips (100ct)", quantity: 2, category: "diabetic", cost: 80.0 },
            { name: "Hydrocolloid Dressings", quantity: 30, category: "wound_care", cost: 45.0 },
          ],
          totalCost: 280.0,
          insuranceCoverage: "80%",
          autoGenerated: true,
          notes: "Auto-generated based on diabetic diagnosis and wound care needs",
        },
        {
          id: "DME-PARACHUTE-002",
          supplier: "Parachute Health",
          status: "approved",
          orderDate: "2024-01-20",
          estimatedDelivery: "2024-01-26",
          trackingNumber: "PH987654321",
          items: [
            { name: "Walker with Wheels", quantity: 1, category: "mobility", cost: 120.0 },
            { name: "Toilet Safety Rails", quantity: 1, category: "mobility", cost: 85.0 },
          ],
          totalCost: 205.0,
          insuranceCoverage: "80%",
          autoGenerated: true,
          notes: "Auto-generated based on mobility/PT needs",
        },
      ],
      woundCare: {
        hasWounds: true,
        woundCount: 2,
        woundTypes: ["Diabetic ulcer", "Pressure sore"],
        lastAssessment: "2024-01-20",
        healingProgress: "Improving",
        nextDressing: "2024-01-22",
        supplies: ["Hydrocolloid dressing", "Silver foam", "Gauze pads"],
      },
    },
    {
      id: "PT-2024-002",
      name: "Robert Thompson",
      axxessId: "AX-12346",
      referralDate: "2024-01-18",
      currentStatus: "Active",
      dischargeStatus: "N/A",
      referralAccepted: true,
      assignedStaff: "Michael Chen, PT",
      socDueDate: "2024-01-23",
      socWindowStatus: "Due Soon",
      location: "North Branch",
      referralType: "Facility",
      priority: "Medium",
      diagnosis: "Post-surgical rehabilitation",
      age: 65,
      insurance: "Blue Cross",
      phoneNumber: "(555) 234-5678",
      address: "456 Oak Ave, City, ST 12345",
      emergencyContact: "Mary Thompson (Wife) - (555) 876-5432",
      episodeStartDate: "2024-01-18",
      episodeEndDate: "2024-03-18",
      nextReEvalDate: "2024-02-17",
      lupaStatus: "Over Threshold",
      totalEpisodeCost: 3200.0,
      projectedCost: 3800.0,
      visitFrequencies: [
        {
          discipline: "PT",
          authorized: 15,
          used: 12,
          remaining: 3,
          weeklyFrequency: "3x/week",
          lastVisit: "2024-01-20",
          nextScheduled: "2024-01-22",
          lupaThreshold: 10,
          isOverThreshold: true,
          costPerVisit: 150.0,
          totalCost: 1800.0,
        },
        {
          discipline: "OT",
          authorized: 10,
          used: 8,
          remaining: 2,
          weeklyFrequency: "2x/week",
          lastVisit: "2024-01-19",
          nextScheduled: "2024-01-21",
          lupaThreshold: 10,
          isOverThreshold: false,
          costPerVisit: 140.0,
          totalCost: 1120.0,
        },
        {
          discipline: "RN",
          authorized: 6,
          used: 2,
          remaining: 4,
          weeklyFrequency: "1x/week",
          lastVisit: "2024-01-18",
          nextScheduled: "2024-01-25",
          lupaThreshold: 10,
          isOverThreshold: false,
          costPerVisit: 125.0,
          totalCost: 250.0,
        },
      ],
      patientGoals: [
        {
          id: "G003",
          discipline: "PT",
          goal: "Return to pre-surgery mobility level",
          targetDate: "2024-02-28",
          status: "In Progress",
          progress: 80,
          notes: "Excellent progress, ahead of schedule",
        },
        {
          id: "G004",
          discipline: "OT",
          goal: "Independent ADL performance",
          targetDate: "2024-02-25",
          status: "In Progress",
          progress: 70,
          notes: "Patient demonstrating good adaptation",
        },
      ],
      dmeOrders: [
        {
          id: "DME-VERSE-001",
          supplier: "Verse Medical",
          status: "delivered",
          orderDate: "2024-01-19",
          estimatedDelivery: "2024-01-23",
          trackingNumber: "VM456789123",
          items: [
            { name: "Walker with Wheels", quantity: 1, category: "mobility", cost: 120.0 },
            { name: "Shower Chair", quantity: 1, category: "mobility", cost: 95.0 },
            { name: "Toilet Safety Rails", quantity: 1, category: "mobility", cost: 85.0 },
          ],
          totalCost: 300.0,
          insuranceCoverage: "90%",
          autoGenerated: true,
          notes: "Auto-generated based on post-surgical rehabilitation needs",
        },
      ],
    },
    {
      id: "PT-2024-003",
      name: "Dorothy Williams",
      axxessId: "AX-12347",
      referralDate: "2024-01-20",
      currentStatus: "Pending",
      dischargeStatus: "N/A",
      referralAccepted: false,
      assignedStaff: "Emily Davis, OT",
      socDueDate: "2024-01-25",
      socWindowStatus: "On Track",
      location: "South Campus",
      referralType: "Clinic",
      priority: "Low",
      diagnosis: "Stroke recovery, occupational therapy",
      age: 72,
      insurance: "Medicaid",
      phoneNumber: "(555) 345-6789",
      address: "789 Pine St, City, ST 12345",
      emergencyContact: "James Williams (Brother) - (555) 765-4321",
      episodeStartDate: "2024-01-20",
      episodeEndDate: "2024-03-20",
      nextReEvalDate: "2024-02-19",
      lupaStatus: "Safe",
      totalEpisodeCost: 1800.0,
      projectedCost: 2100.0,
      visitFrequencies: [
        {
          discipline: "OT",
          authorized: 12,
          used: 3,
          remaining: 9,
          weeklyFrequency: "2x/week",
          lastVisit: "2024-01-19",
          nextScheduled: "2024-01-21",
          lupaThreshold: 10,
          isOverThreshold: false,
          costPerVisit: 140.0,
          totalCost: 420.0,
        },
        {
          discipline: "MSW",
          authorized: 4,
          used: 1,
          remaining: 3,
          weeklyFrequency: "1x/month",
          lastVisit: "2024-01-20",
          nextScheduled: "2024-02-20",
          lupaThreshold: 5,
          isOverThreshold: false,
          costPerVisit: 120.0,
          totalCost: 120.0,
        },
      ],
      patientGoals: [
        {
          id: "G005",
          discipline: "OT",
          goal: "Improve fine motor skills for daily tasks",
          targetDate: "2024-03-01",
          status: "Not Started",
          progress: 10,
          notes: "Initial assessment completed",
        },
      ],
      dmeOrders: [],
      woundCare: {
        hasWounds: true,
        woundCount: 1,
        woundTypes: ["Pressure ulcer"],
        lastAssessment: "2024-01-19",
        healingProgress: "Stable",
        nextDressing: "2024-01-21",
        supplies: ["Foam dressing", "Barrier cream"],
      },
    },
  ])

  // Auto-generate DME orders when patient is accepted
  const handlePatientAcceptance = async (patientId: string) => {
    const patient = patients.find((p) => p.id === patientId)
    if (!patient) return

    try {
      // Generate automatic DME orders
      const autoOrders = await generateAutomaticDMEOrder(patient)

      // Submit orders to suppliers
      const submittedOrders = await Promise.all(autoOrders.map((order) => submitDMEOrder(order, patientId)))

      // Update patient with new DME orders
      setPatients((prev) =>
        prev.map((p) => (p.id === patientId ? { ...p, dmeOrders: [...(p.dmeOrders || []), ...submittedOrders] } : p)),
      )

      console.log(`Auto-generated ${submittedOrders.length} DME orders for ${patient.name}`)
    } catch (error) {
      console.error("Failed to generate automatic DME orders:", error)
    }
  }

  // Sync with Axxess API
  const syncWithAxxess = async () => {
    setIsLoading(true)
    try {
      const response = await fetch("/api/axxess/patients/sync", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          lastSync: lastSync,
          includeVisitData: true,
          includeLupaData: true,
        }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.success) {
          // Update patients with Axxess data
          setPatients((prevPatients) => {
            const updatedPatients = [...prevPatients]
            data.patients?.forEach((axxessPatient: any) => {
              const existingIndex = updatedPatients.findIndex((p) => p.axxessId === axxessPatient.axxessId)
              if (existingIndex >= 0) {
                updatedPatients[existingIndex] = { ...updatedPatients[existingIndex], ...axxessPatient }
              } else {
                updatedPatients.push(axxessPatient)
              }
            })
            return updatedPatients
          })
          setLastSync(new Date().toISOString())
        }
      }
    } catch (error) {
      console.error("Axxess sync error:", error)
    } finally {
      setIsLoading(false)
    }
  }

  // Auto-sync every 15 minutes
  useEffect(() => {
    const interval = setInterval(syncWithAxxess, 15 * 60 * 1000)
    return () => clearInterval(interval)
  }, [lastSync])

  // Auto-generate DME orders for newly accepted patients
  useEffect(() => {
    if (!patients || patients.length === 0) return

    const newlyAcceptedPatients = patients.filter(
      (p) => p.referralAccepted && p.currentStatus === "Active" && (!p.dmeOrders || p.dmeOrders.length === 0),
    )

    newlyAcceptedPatients.forEach((patient) => {
      handlePatientAcceptance(patient.id)
    })
  }, [patients])

  // Calculate SOC window status based on current date
  const calculateSOCStatus = (socDueDate: string): "On Track" | "Due Soon" | "Overdue" => {
    const today = new Date()
    const dueDate = new Date(socDueDate)
    const timeDiff = dueDate.getTime() - today.getTime()
    const hoursDiff = timeDiff / (1000 * 3600)

    if (hoursDiff < 0) return "Overdue"
    if (hoursDiff < 24) return "Due Soon"
    return "On Track"
  }

  // Update SOC status for all patients - Add null check
  const updatedPatients = useMemo(() => {
    if (!patients || patients.length === 0) return []

    return patients.map((patient) => ({
      ...patient,
      socWindowStatus: calculateSOCStatus(patient.socDueDate),
      visitFrequencies: patient.visitFrequencies || [],
      patientGoals: patient.patientGoals || [],
      dmeOrders: patient.dmeOrders || [],
    }))
  }, [patients])

  // Get unique values for filters - Add null checks
  const uniqueStaff = useMemo(() => {
    if (!updatedPatients || updatedPatients.length === 0) return []
    return [...new Set(updatedPatients.map((p) => p.assignedStaff).filter(Boolean))]
  }, [updatedPatients])

  const uniqueLocations = useMemo(() => {
    if (!updatedPatients || updatedPatients.length === 0) return []
    return [...new Set(updatedPatients.map((p) => p.location).filter(Boolean))]
  }, [updatedPatients])

  const uniqueReferralTypes = useMemo(() => {
    if (!updatedPatients || updatedPatients.length === 0) return []
    return [...new Set(updatedPatients.map((p) => p.referralType).filter(Boolean))]
  }, [updatedPatients])

  // Filter and search patients - Add null checks
  const filteredPatients = useMemo(() => {
    if (!updatedPatients || updatedPatients.length === 0) return []

    let filtered = updatedPatients

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(
        (patient) =>
          patient.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patient.id?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patient.axxessId?.toLowerCase().includes(searchTerm.toLowerCase()) ||
          patient.diagnosis?.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    // Staff filter
    if (staffFilter !== "All") {
      filtered = filtered.filter((patient) => patient.assignedStaff === staffFilter)
    }

    // Location filter
    if (locationFilter !== "All") {
      filtered = filtered.filter((patient) => patient.location === locationFilter)
    }

    // Status filter
    if (statusFilter !== "All") {
      filtered = filtered.filter((patient) => patient.socWindowStatus === statusFilter)
    }

    // Referral type filter
    if (referralTypeFilter !== "All") {
      filtered = filtered.filter((patient) => patient.referralType === referralTypeFilter)
    }

    // LUPA filter
    if (lupaFilter !== "All") {
      filtered = filtered.filter((patient) => patient.lupaStatus === lupaFilter)
    }

    // Sort by priority (Hospital first, then Facility, then Clinic)
    const priorityOrder = { Hospital: 1, Facility: 2, Clinic: 3 }
    filtered.sort((a, b) => (priorityOrder[a.referralType] || 999) - (priorityOrder[b.referralType] || 999))

    return filtered
  }, [updatedPatients, searchTerm, staffFilter, locationFilter, statusFilter, referralTypeFilter, lupaFilter])

  // Calculate summary statistics - Add null checks
  const summaryStats = useMemo(() => {
    if (!updatedPatients || updatedPatients.length === 0) {
      return {
        onTrack: 0,
        dueSoon: 0,
        overdue: 0,
        totalActive: 0,
        totalWoundCare: 0,
        hospitalReferrals: 0,
        lupaSafe: 0,
        lupaAtRisk: 0,
        lupaOverThreshold: 0,
        totalEpisodeCost: 0,
        totalProjectedCost: 0,
        reEvalDue: 0,
        pendingReferrals: 0,
        totalDMEOrders: 0,
        pendingDMEOrders: 0,
        shippedDMEOrders: 0,
        totalDMECost: 0,
        total: 0,
      }
    }

    const onTrack = updatedPatients.filter((p) => p.socWindowStatus === "On Track").length
    const dueSoon = updatedPatients.filter((p) => p.socWindowStatus === "Due Soon").length
    const overdue = updatedPatients.filter((p) => p.socWindowStatus === "Overdue").length
    const totalActive = updatedPatients.filter((p) => p.currentStatus === "Active").length
    const totalWoundCare = updatedPatients.filter((p) => p.woundCare?.hasWounds).length
    const hospitalReferrals = updatedPatients.filter((p) => p.referralType === "Hospital").length

    // LUPA statistics
    const lupaSafe = updatedPatients.filter((p) => p.lupaStatus === "Safe").length
    const lupaAtRisk = updatedPatients.filter((p) => p.lupaStatus === "At Risk").length
    const lupaOverThreshold = updatedPatients.filter((p) => p.lupaStatus === "Over Threshold").length

    // Financial statistics
    const totalEpisodeCost = updatedPatients.reduce((sum, p) => sum + (p.totalEpisodeCost || 0), 0)
    const totalProjectedCost = updatedPatients.reduce((sum, p) => sum + (p.projectedCost || 0), 0)

    // DME statistics
    const totalDMEOrders = updatedPatients.reduce((sum, p) => sum + (p.dmeOrders?.length || 0), 0)
    const pendingDMEOrders = updatedPatients.reduce(
      (sum, p) => sum + (p.dmeOrders?.filter((o) => o.status === "pending").length || 0),
      0,
    )
    const shippedDMEOrders = updatedPatients.reduce(
      (sum, p) => sum + (p.dmeOrders?.filter((o) => o.status === "shipped").length || 0),
      0,
    )
    const totalDMECost = updatedPatients.reduce(
      (sum, p) => sum + (p.dmeOrders?.reduce((orderSum, o) => orderSum + (o.totalCost || 0), 0) || 0),
      0,
    )

    // Re-evaluation alerts
    const reEvalDue = updatedPatients.filter((p) => {
      if (!p.nextReEvalDate) return false
      const reEvalDate = new Date(p.nextReEvalDate)
      const today = new Date()
      const daysDiff = (reEvalDate.getTime() - today.getTime()) / (1000 * 3600 * 24)
      return daysDiff <= 7 && daysDiff >= 0
    }).length

    const pendingReferrals = 4 // Mock data, in reality this would come from the referral system

    return {
      onTrack,
      dueSoon,
      overdue,
      totalActive,
      totalWoundCare,
      hospitalReferrals,
      lupaSafe,
      lupaAtRisk,
      lupaOverThreshold,
      totalEpisodeCost,
      totalProjectedCost,
      reEvalDue,
      pendingReferrals,
      totalDMEOrders,
      pendingDMEOrders,
      shippedDMEOrders,
      totalDMECost,
      total: updatedPatients.length,
    }
  }, [updatedPatients])

  const getStatusColor = (status: string) => {
    switch (status) {
      case "On Track":
        return "bg-green-100 text-green-800"
      case "Due Soon":
        return "bg-yellow-100 text-yellow-800"
      case "Overdue":
        return "bg-red-100 text-red-800"
      case "Active":
        return "bg-blue-100 text-blue-800"
      case "Pending":
        return "bg-orange-100 text-orange-800"
      case "Discharged":
        return "bg-gray-100 text-gray-800"
      case "On Hold":
        return "bg-purple-100 text-purple-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getDMEStatusColor = (status: string) => {
    switch (status) {
      case "pending":
        return "bg-yellow-100 text-yellow-800"
      case "approved":
        return "bg-blue-100 text-blue-800"
      case "shipped":
        return "bg-purple-100 text-purple-800"
      case "delivered":
        return "bg-green-100 text-green-800"
      case "cancelled":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getLupaStatusColor = (status: string) => {
    switch (status) {
      case "Safe":
        return "bg-green-100 text-green-800"
      case "At Risk":
        return "bg-yellow-100 text-yellow-800"
      case "Over Threshold":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getReferralTypeColor = (type: string) => {
    switch (type) {
      case "Hospital":
        return "bg-red-100 text-red-800"
      case "Facility":
        return "bg-blue-100 text-blue-800"
      case "Clinic":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getReferralTypeIcon = (type: string) => {
    switch (type) {
      case "Hospital":
        return <Building2 className="h-3 w-3" />
      case "Facility":
        return <Building className="h-3 w-3" />
      case "Clinic":
        return <Stethoscope className="h-3 w-3" />
      default:
        return <Building className="h-3 w-3" />
    }
  }

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case "High":
        return "bg-red-100 text-red-800"
      case "Medium":
        return "bg-yellow-100 text-yellow-800"
      case "Low":
        return "bg-green-100 text-green-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getWoundProgressColor = (progress: string) => {
    switch (progress) {
      case "Improving":
        return "text-green-600"
      case "Stable":
        return "text-yellow-600"
      case "Declining":
        return "text-red-600"
      default:
        return "text-gray-600"
    }
  }

  const getGoalStatusColor = (status: string) => {
    switch (status) {
      case "Achieved":
        return "bg-green-100 text-green-800"
      case "In Progress":
        return "bg-blue-100 text-blue-800"
      case "Not Started":
        return "bg-gray-100 text-gray-800"
      case "Modified":
        return "bg-yellow-100 text-yellow-800"
      case "Discontinued":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const startStaffEvaluation = async (staffMember: any) => {
    setSelectedStaffForEvaluation(staffMember)
    setEvaluationInProgress(true)
    setShowCompetencyModal(true)

    // Start AI analysis simulation
    setTimeout(() => {
      setAiAnalysisResults([
        {
          category: "Clinical Skills",
          score: 92,
          insights: ["Excellent medication administration technique", "Proper sterile procedure followed"],
          recommendations: ["Continue current practices", "Consider mentoring junior staff"],
        },
        {
          category: "Communication",
          score: 88,
          insights: ["Good patient rapport", "Clear documentation"],
          recommendations: ["Improve interdisciplinary communication", "Practice active listening"],
        },
      ])
    }, 3000)
  }

  const completeEvaluation = async () => {
    setEvaluationInProgress(false)
    setShowCompetencyModal(false)
    // Save evaluation results
  }

  const getEligibilityColor = (status: string) => {
    switch (status) {
      case "Eligible":
        return "bg-green-100 text-green-800"
      case "Pending":
        return "bg-yellow-100 text-yellow-800"
      case "Not Eligible":
        return "bg-red-100 text-red-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getAuthColor = (status: string) => {
    switch (status) {
      case "Approved":
        return "bg-green-100 text-green-800"
      case "Pending":
        return "bg-yellow-100 text-yellow-800"
      case "Denied":
        return "bg-red-100 text-red-800"
      case "Not Required":
        return "bg-gray-100 text-gray-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between py-6">
            <div className="flex items-center">
              <Link href="/">
                <Button variant="ghost" size="sm" className="mr-4">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Dashboard
                </Button>
              </Link>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">M.A.S.E AI Patient Tracking Dashboard</h1>
                <p className="text-gray-600">
                  AI-powered patient management with LUPA monitoring, visit frequency tracking, automatic DME ordering,
                  and Axxess integration
                </p>
              </div>
            </div>
            <div className="flex items-center space-x-3">
              <Button variant="outline" size="sm" onClick={syncWithAxxess} disabled={isLoading}>
                <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? "animate-spin" : ""}`} />
                {isLoading ? "Syncing..." : "Sync Axxess"}
              </Button>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
              <Dialog open={showAddPatient} onOpenChange={setShowAddPatient}>
                <DialogTrigger asChild>
                  <Button size="sm">
                    <Plus className="h-4 w-4 mr-2" />
                    Add Patient
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>Add New Patient</DialogTitle>
                    <DialogDescription>Enter patient information and referral details</DialogDescription>
                  </DialogHeader>
                  <div className="grid grid-cols-2 gap-4 py-4">
                    <div className="space-y-2">
                      <Label htmlFor="patientName">Patient Name</Label>
                      <Input id="patientName" placeholder="Enter full name" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="patientId">Patient ID</Label>
                      <Input id="patientId" placeholder="PT-2024-XXX" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="axxessId">Axxess ID</Label>
                      <Input id="axxessId" placeholder="AX-XXXXX" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="referralType">Referral Type</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select type" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Hospital">Hospital (High Priority)</SelectItem>
                          <SelectItem value="Facility">Facility (Medium Priority)</SelectItem>
                          <SelectItem value="Clinic">Clinic (Low Priority)</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="assignedStaff">Assigned Staff</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select staff" />
                        </SelectTrigger>
                        <SelectContent>
                          {uniqueStaff.map((staff) => (
                            <SelectItem key={staff} value={staff}>
                              {staff}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="location">Location</Label>
                      <Select>
                        <SelectTrigger>
                          <SelectValue placeholder="Select location" />
                        </SelectTrigger>
                        <SelectContent>
                          {uniqueLocations.map((location) => (
                            <SelectItem key={location} value={location}>
                              {location}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="socDueDate">SOC Due Date</Label>
                      <Input id="socDueDate" type="date" />
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="episodeStartDate">Episode Start Date</Label>
                      <Input id="episodeStartDate" type="date" />
                    </div>
                    <div className="col-span-2 space-y-2">
                      <Label htmlFor="diagnosis">Diagnosis</Label>
                      <Textarea id="diagnosis" placeholder="Enter primary diagnosis and conditions" />
                    </div>
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={() => setShowAddPatient(false)}>
                      Cancel
                    </Button>
                    <Button onClick={() => setShowAddPatient(false)}>Add Patient</Button>
                  </div>
                </DialogContent>
              </Dialog>
              <Link href="/referral-management">
                <Button
                  size="sm"
                  variant="outline"
                  className="bg-indigo-50 border-indigo-200 text-indigo-700 hover:bg-indigo-100"
                >
                  <Inbox className="h-4 w-4 mr-2" />
                  Process Referrals
                  <Badge className="ml-2 bg-indigo-500 text-white">{summaryStats.pendingReferrals}</Badge>
                </Button>
              </Link>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Critical Alerts */}
        {summaryStats.lupaOverThreshold > 0 && (
          <Alert className="mb-6 border-red-200 bg-red-50">
            <AlertTriangle className="h-4 w-4 text-red-600" />
            <AlertTitle className="text-red-800">LUPA Threshold Alert</AlertTitle>
            <AlertDescription className="text-red-700">
              {summaryStats.lupaOverThreshold} patient(s) are over the LUPA threshold. Review visit frequencies to
              prevent financial loss.
            </AlertDescription>
          </Alert>
        )}

        {summaryStats.reEvalDue > 0 && (
          <Alert className="mb-6 border-yellow-200 bg-yellow-50">
            <Calendar className="h-4 w-4 text-yellow-600" />
            <AlertTitle className="text-yellow-800">Re-Evaluation Due</AlertTitle>
            <AlertDescription className="text-yellow-700">
              {summaryStats.reEvalDue} patient(s) have re-evaluations due within 7 days for potential visit
              authorization increases.
            </AlertDescription>
          </Alert>
        )}

        {summaryStats.pendingDMEOrders > 0 && (
          <Alert className="mb-6 border-blue-200 bg-blue-50">
            <Package className="h-4 w-4 text-blue-600" />
            <AlertTitle className="text-blue-800">DME Orders Pending</AlertTitle>
            <AlertDescription className="text-blue-700">
              {summaryStats.pendingDMEOrders} DME orders are pending approval. Total value: $
              {summaryStats.totalDMECost.toFixed(2)}
            </AlertDescription>
          </Alert>
        )}

        <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
          <TabsList className="grid w-full grid-cols-6">
            <TabsTrigger value="overview">Patient Overview</TabsTrigger>
            <TabsTrigger value="visit-frequency">Visit Frequency</TabsTrigger>
            <TabsTrigger value="lupa-monitoring">LUPA Monitoring</TabsTrigger>
            <TabsTrigger value="goals-tracking">Goals Tracking</TabsTrigger>
            <TabsTrigger value="dme-orders">DME Orders</TabsTrigger>
            <TabsTrigger value="performance-supervision">Performance & Supervision</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-6">
            {/* Enhanced Summary Statistics */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-10 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <CheckCircle className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">On Track</p>
                      <p className="text-2xl font-bold text-green-600">{summaryStats.onTrack}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-yellow-100 rounded-lg">
                      <Clock className="h-6 w-6 text-yellow-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Due Soon</p>
                      <p className="text-2xl font-bold text-yellow-600">{summaryStats.dueSoon}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-red-100 rounded-lg">
                      <AlertTriangle className="h-6 w-6 text-red-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Overdue</p>
                      <p className="text-2xl font-bold text-red-600">{summaryStats.overdue}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <Users className="h-6 w-6 text-blue-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Active</p>
                      <p className="text-2xl font-bold text-blue-600">{summaryStats.totalActive}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <Zap className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">LUPA Safe</p>
                      <p className="text-2xl font-bold text-green-600">{summaryStats.lupaSafe}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-yellow-100 rounded-lg">
                      <AlertCircle className="h-6 w-6 text-yellow-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">At Risk</p>
                      <p className="text-2xl font-bold text-yellow-600">{summaryStats.lupaAtRisk}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-red-100 rounded-lg">
                      <DollarSign className="h-6 w-6 text-red-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Over Threshold</p>
                      <p className="text-2xl font-bold text-red-600">{summaryStats.lupaOverThreshold}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-purple-100 rounded-lg">
                      <Timer className="h-6 w-6 text-purple-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Re-Eval Due</p>
                      <p className="text-2xl font-bold text-purple-600">{summaryStats.reEvalDue}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-indigo-100 rounded-lg">
                      <Inbox className="h-6 w-6 text-indigo-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">New Referrals</p>
                      <p className="text-2xl font-bold text-indigo-600">{summaryStats.pendingReferrals}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-orange-100 rounded-lg">
                      <Package className="h-6 w-6 text-orange-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">DME Orders</p>
                      <p className="text-2xl font-bold text-orange-600">{summaryStats.totalDMEOrders}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Enhanced Filters and Search */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Filter className="h-5 w-5 mr-2" />
                  Filters & Search
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-4">
                  <div className="lg:col-span-2">
                    <Label htmlFor="search">Search Patients</Label>
                    <div className="relative">
                      <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
                      <Input
                        id="search"
                        placeholder="Search by name, ID, Axxess ID, or diagnosis..."
                        value={searchTerm}
                        onChange={(e) => setSearchTerm(e.target.value)}
                        className="pl-10"
                      />
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="staff-filter">Staff</Label>
                    <Select value={staffFilter} onValueChange={setStaffFilter}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="All">All Staff</SelectItem>
                        {uniqueStaff.map((staff) => (
                          <SelectItem key={staff} value={staff}>
                            {staff}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="location-filter">Location</Label>
                    <Select value={locationFilter} onValueChange={setLocationFilter}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="All">All Locations</SelectItem>
                        {uniqueLocations.map((location) => (
                          <SelectItem key={location} value={location}>
                            {location}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="status-filter">SOC Status</Label>
                    <Select value={statusFilter} onValueChange={setStatusFilter}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="All">All Statuses</SelectItem>
                        <SelectItem value="On Track">On Track</SelectItem>
                        <SelectItem value="Due Soon">Due Soon</SelectItem>
                        <SelectItem value="Overdue">Overdue</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="referral-filter">Referral Type</Label>
                    <Select value={referralTypeFilter} onValueChange={setReferralTypeFilter}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="All">All Types</SelectItem>
                        {uniqueReferralTypes.map((type) => (
                          <SelectItem key={type} value={type}>
                            {type}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <Label htmlFor="lupa-filter">LUPA Status</Label>
                    <Select value={lupaFilter} onValueChange={setLupaFilter}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="All">All LUPA</SelectItem>
                        <SelectItem value="Safe">Safe</SelectItem>
                        <SelectItem value="At Risk">At Risk</SelectItem>
                        <SelectItem value="Over Threshold">Over Threshold</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Enhanced Patient Table */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span className="flex items-center">
                    <Users className="h-5 w-5 mr-2" />
                    Patient List ({filteredPatients?.length || 0} of {summaryStats.total})
                  </span>
                  <div className="flex items-center space-x-2">
                    <Badge variant="outline">{filteredPatients?.length || 0} patients shown</Badge>
                    {lastSync && (
                      <Badge variant="outline" className="text-xs">
                        Last sync: {new Date(lastSync).toLocaleTimeString()}
                      </Badge>
                    )}
                  </div>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr className="border-b bg-gray-50">
                        <th className="text-left p-3 font-medium">Patient Info</th>
                        <th className="text-left p-3 font-medium">Auth Status</th>
                        <th className="text-left p-3 font-medium">Episode Dates</th>
                        <th className="text-left p-3 font-medium">Axxess ID</th>
                        <th className="text-left p-3 font-medium">LUPA Status</th>
                        <th className="text-left p-3 font-medium">Visit Summary</th>
                        <th className="text-left p-3 font-medium">DME Orders</th>
                        <th className="text-left p-3 font-medium">Episode Cost</th>
                        <th className="text-left p-3 font-medium">Re-Eval Date</th>
                        <th className="text-left p-3 font-medium">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {filteredPatients && filteredPatients.length > 0 ? (
                        filteredPatients.map((patient) => (
                          <tr key={patient.id} className="border-b hover:bg-gray-50 transition-colors">
                            <td className="p-3">
                              <div>
                                <div className="font-medium">{patient.name}</div>
                                <div className="text-sm text-gray-600">{patient.id}</div>
                                <div className="text-xs text-gray-500">{patient.diagnosis}</div>
                                <div className="flex items-center mt-1 space-x-1">
                                  <Badge className={getReferralTypeColor(patient.referralType)}>
                                    {getReferralTypeIcon(patient.referralType)}
                                    <span className="ml-1">{patient.referralType}</span>
                                  </Badge>
                                  <Badge className={getStatusColor(patient.currentStatus)}>
                                    {patient.currentStatus}
                                  </Badge>
                                </div>
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="flex flex-col space-y-1">
                                <Badge
                                  className={getEligibilityColor(
                                    patient.id === "PT-2024-001"
                                      ? "Eligible"
                                      : patient.id === "PT-2024-002"
                                        ? "Eligible"
                                        : "Not Checked",
                                  )}
                                >
                                  {patient.id === "PT-2024-001"
                                    ? "Eligible"
                                    : patient.id === "PT-2024-002"
                                      ? "Eligible"
                                      : "Not Checked"}
                                </Badge>
                                <Badge
                                  className={getAuthColor(
                                    patient.id === "PT-2024-001"
                                      ? "Approved"
                                      : patient.id === "PT-2024-002"
                                        ? "Pending"
                                        : "Not Required",
                                  )}
                                >
                                  {patient.id === "PT-2024-001"
                                    ? "Approved"
                                    : patient.id === "PT-2024-002"
                                      ? "Pending"
                                      : "Not Required"}
                                </Badge>
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="text-sm">
                                <div>Start: {patient.episodeStartDate}</div>
                                <div>End: {patient.episodeEndDate}</div>
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="font-mono text-sm">{patient.axxessId}</div>
                            </td>
                            <td className="p-3">
                              <Badge className={getLupaStatusColor(patient.lupaStatus)}>{patient.lupaStatus}</Badge>
                            </td>
                            <td className="p-3">
                              <div className="space-y-1">
                                {patient.visitFrequencies && patient.visitFrequencies.length > 0 ? (
                                  patient.visitFrequencies.map((freq, index) => (
                                    <div key={index} className="flex items-center text-xs">
                                      <span className="font-medium w-8">{freq.discipline}:</span>
                                      <span
                                        className={freq.isOverThreshold ? "text-red-600 font-medium" : "text-gray-600"}
                                      >
                                        {freq.used}/{freq.authorized}
                                      </span>
                                      {freq.isOverThreshold && <AlertTriangle className="h-3 w-3 text-red-500 ml-1" />}
                                    </div>
                                  ))
                                ) : (
                                  <span className="text-xs text-gray-500">No visits</span>
                                )}
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="space-y-1">
                                {patient.dmeOrders && patient.dmeOrders.length > 0 ? (
                                  patient.dmeOrders.slice(0, 2).map((order, index) => (
                                    <div key={index} className="flex items-center text-xs">
                                      <Badge className={getDMEStatusColor(order.status)} variant="outline">
                                        {order.status}
                                      </Badge>
                                      <span className="ml-1 text-gray-600">${order.totalCost.toFixed(0)}</span>
                                    </div>
                                  ))
                                ) : (
                                  <span className="text-xs text-gray-500">No orders</span>
                                )}
                                {patient.dmeOrders && patient.dmeOrders.length > 2 && (
                                  <div className="text-xs text-gray-500">+{patient.dmeOrders.length - 2} more</div>
                                )}
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="text-sm">
                                <div className="font-medium">${patient.totalEpisodeCost.toFixed(2)}</div>
                                <div className="text-gray-500">Proj: ${patient.projectedCost.toFixed(2)}</div>
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="text-sm">
                                {patient.nextReEvalDate}
                                {(() => {
                                  if (!patient.nextReEvalDate) return null
                                  const reEvalDate = new Date(patient.nextReEvalDate)
                                  const today = new Date()
                                  const daysDiff = Math.ceil(
                                    (reEvalDate.getTime() - today.getTime()) / (1000 * 3600 * 24),
                                  )
                                  if (daysDiff <= 7 && daysDiff >= 0) {
                                    return (
                                      <Badge className="ml-1 bg-yellow-100 text-yellow-800 text-xs">Due Soon</Badge>
                                    )
                                  }
                                  return null
                                })()}
                              </div>
                            </td>
                            <td className="p-3">
                              <div className="flex space-x-1">
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => {
                                    setSelectedPatient(patient)
                                    setShowPatientDetails(true)
                                  }}
                                >
                                  <Eye className="h-3 w-3" />
                                </Button>
                                <Button size="sm" variant="outline">
                                  <Edit className="h-3 w-3" />
                                </Button>
                                <Button size="sm" variant="outline">
                                  <BarChart3 className="h-3 w-3" />
                                </Button>
                              </div>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan={10} className="p-8 text-center text-gray-500">
                            No patients found matching your criteria
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="dme-orders" className="space-y-6">
            {/* DME Orders Dashboard */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-blue-100 rounded-lg">
                      <Package className="h-6 w-6 text-blue-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Total Orders</p>
                      <p className="text-2xl font-bold text-blue-600">{summaryStats.totalDMEOrders}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-yellow-100 rounded-lg">
                      <Clock className="h-6 w-6 text-yellow-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Pending</p>
                      <p className="text-2xl font-bold text-yellow-600">{summaryStats.pendingDMEOrders}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-purple-100 rounded-lg">
                      <Truck className="h-6 w-6 text-purple-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Shipped</p>
                      <p className="text-2xl font-bold text-purple-600">{summaryStats.shippedDMEOrders}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardContent className="p-4">
                  <div className="flex items-center">
                    <div className="p-2 bg-green-100 rounded-lg">
                      <DollarSign className="h-6 w-6 text-green-600" />
                    </div>
                    <div className="ml-4">
                      <p className="text-sm font-medium text-gray-600">Total Value</p>
                      <p className="text-2xl font-bold text-green-600">${summaryStats.totalDMECost.toFixed(0)}</p>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* DME Orders by Patient */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <ShoppingCart className="h-5 w-5 mr-2" />
                  DME Orders by Patient
                </CardTitle>
                <CardDescription>
                  Automatic DME ordering through Parachute Health and Verse Medical based on patient diagnosis and needs
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {filteredPatients && filteredPatients.length > 0 ? (
                    filteredPatients
                      .filter((p) => p.dmeOrders && p.dmeOrders.length > 0)
                      .map((patient) => (
                        <div key={patient.id} className="p-4 border rounded-lg">
                          <div className="flex items-center justify-between mb-4">
                            <div>
                              <h3 className="font-medium">{patient.name}</h3>
                              <p className="text-sm text-gray-600">
                                {patient.id} • {patient.diagnosis}
                              </p>
                            </div>
                            <div className="flex items-center space-x-2">
                              <Badge variant="outline">{patient.dmeOrders?.length || 0} Orders</Badge>
                              <Badge className="bg-green-100 text-green-800">
                                ${(patient.dmeOrders?.reduce((sum, order) => sum + order.totalCost, 0) || 0).toFixed(2)}{" "}
                                Total
                              </Badge>
                            </div>
                          </div>

                          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            {patient.dmeOrders?.map((order) => (
                              <div key={order.id} className="p-3 bg-gray-50 rounded border">
                                <div className="flex items-center justify-between mb-2">
                                  <div className="flex items-center space-x-2">
                                    <Badge
                                      variant="outline"
                                      className={
                                        order.supplier === "Parachute Health"
                                          ? "bg-blue-100 text-blue-800"
                                          : "bg-purple-100 text-purple-800"
                                      }
                                    >
                                      {order.supplier}
                                    </Badge>
                                    <Badge className={getDMEStatusColor(order.status)}>{order.status}</Badge>
                                  </div>
                                  {order.autoGenerated && (
                                    <Badge variant="outline" className="bg-green-100 text-green-800 text-xs">
                                      <Zap className="h-3 w-3 mr-1" />
                                      Auto
                                    </Badge>
                                  )}
                                </div>

                                <div className="space-y-2">
                                  <div className="text-sm">
                                    <strong>Order ID:</strong> {order.id}
                                  </div>
                                  <div className="text-sm">
                                    <strong>Order Date:</strong> {order.orderDate}
                                  </div>
                                  {order.trackingNumber && (
                                    <div className="text-sm">
                                      <strong>Tracking:</strong> {order.trackingNumber}
                                    </div>
                                  )}
                                  {order.estimatedDelivery && (
                                    <div className="text-sm">
                                      <strong>Est. Delivery:</strong> {order.estimatedDelivery}
                                    </div>
                                  )}

                                  <div className="space-y-1">
                                    <div className="text-sm font-medium">Items:</div>
                                    {order.items?.map((item, idx) => (
                                      <div key={idx} className="text-xs text-gray-600 flex justify-between">
                                        <span>
                                          {item.name} (x{item.quantity})
                                        </span>
                                        <span>${(item.cost * item.quantity).toFixed(2)}</span>
                                      </div>
                                    ))}
                                  </div>

                                  <div className="flex justify-between text-sm font-medium pt-2 border-t">
                                    <span>Total:</span>
                                    <span>${order.totalCost.toFixed(2)}</span>
                                  </div>

                                  <div className="text-xs text-gray-600">
                                    Insurance Coverage: {order.insuranceCoverage}
                                  </div>

                                  {order.notes && (
                                    <div className="text-xs text-gray-600 italic">
                                      <strong>Notes:</strong> {order.notes}
                                    </div>
                                  )}
                                </div>

                                <div className="flex space-x-2 mt-3">
                                  {order.trackingNumber && (
                                    <Button size="sm" variant="outline" className="text-xs bg-transparent">
                                      <Truck className="h-3 w-3 mr-1" />
                                      Track
                                    </Button>
                                  )}
                                  <Button size="sm" variant="outline" className="text-xs bg-transparent">
                                    <Eye className="h-3 w-3 mr-1" />
                                    Details
                                  </Button>
                                  {order.status === "pending" && (
                                    <Button size="sm" variant="outline" className="text-xs bg-transparent">
                                      <RefreshCw className="h-3 w-3 mr-1" />
                                      Resubmit
                                    </Button>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>

                          {/* Auto-generation info */}
                          {patient.dmeOrders?.some((o) => o.autoGenerated) && (
                            <Alert className="mt-4 border-green-200 bg-green-50">
                              <Zap className="h-4 w-4 text-green-600" />
                              <AlertTitle className="text-green-800">Automatic DME Generation</AlertTitle>
                              <AlertDescription className="text-green-700">
                                DME orders were automatically generated based on patient diagnosis and care needs.
                                Orders submitted to {patient.dmeOrders[0]?.supplier} for processing.
                              </AlertDescription>
                            </Alert>
                          )}
                        </div>
                      ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">No DME orders found for current patients</div>
                  )}
                </div>
              </CardContent>
            </Card>

            {/* DME Supplier Integration Status */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <div className="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
                      <Package className="h-4 w-4 text-white" />
                    </div>
                    Parachute Health Integration
                  </CardTitle>
                  <CardDescription>Medicare and Medicaid DME orders</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Connection Status</span>
                      <Badge className="bg-green-100 text-green-800">Connected</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Orders This Month</span>
                      <span className="font-medium">
                        {patients.reduce(
                          (sum, p) => sum + (p.dmeOrders?.filter((o) => o.supplier === "Parachute Health").length || 0),
                          0,
                        )}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Average Processing Time</span>
                      <span className="font-medium">2.3 hours</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Success Rate</span>
                      <span className="font-medium text-green-600">94%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>

              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center">
                    <div className="w-8 h-8 bg-purple-600 rounded-lg flex items-center justify-center mr-3">
                      <Package className="h-4 w-4 text-white" />
                    </div>
                    Verse Medical Integration
                  </CardTitle>
                  <CardDescription>Commercial insurance DME orders</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-3">
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Connection Status</span>
                      <Badge className="bg-green-100 text-green-800">Connected</Badge>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Orders This Month</span>
                      <span className="font-medium">
                        {patients.reduce(
                          (sum, p) => sum + (p.dmeOrders?.filter((o) => o.supplier === "Verse Medical").length || 0),
                          0,
                        )}
                      </span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Average Processing Time</span>
                      <span className="font-medium">1.8 hours</span>
                    </div>
                    <div className="flex justify-between items-center">
                      <span className="text-sm text-gray-600">Success Rate</span>
                      <span className="font-medium text-green-600">97%</span>
                    </div>
                  </div>
                </CardContent>
              </Card>
            </div>
          </TabsContent>

          {/* Other tabs would continue here... */}
        </Tabs>
      </main>
    </div>
  )
}
